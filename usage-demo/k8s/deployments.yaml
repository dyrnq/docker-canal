apiVersion: v1
kind: ConfigMap
metadata:
  name: canal-mysql-initdb
data:
  initdb.sql: |
    create database if not exists canal_tsdb default character set utf8mb4 collate utf8mb4_unicode_ci;
    use canal_tsdb;
    CREATE TABLE IF NOT EXISTS `meta_snapshot` (
      `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
      `gmt_create` datetime NOT NULL COMMENT '创建时间',
      `gmt_modified` datetime NOT NULL COMMENT '修改时间',
      `destination` varchar(128) DEFAULT NULL COMMENT '通道名称',
      `binlog_file` varchar(64) DEFAULT NULL COMMENT 'binlog文件名',
      `binlog_offest` bigint(20) DEFAULT NULL COMMENT 'binlog偏移量',
      `binlog_master_id` varchar(64) DEFAULT NULL COMMENT 'binlog节点id',
      `binlog_timestamp` bigint(20) DEFAULT NULL COMMENT 'binlog应用的时间戳',
      `data` longtext DEFAULT NULL COMMENT '表结构数据',
      `extra` text DEFAULT NULL COMMENT '额外的扩展信息',
      PRIMARY KEY (`id`),
      UNIQUE KEY binlog_file_offest(`destination`,`binlog_master_id`,`binlog_file`,`binlog_offest`),
      KEY `destination` (`destination`),
      KEY `destination_timestamp` (`destination`,`binlog_timestamp`),
      KEY `gmt_modified` (`gmt_modified`)
    ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT='表结构记录表快照表';

    CREATE TABLE IF NOT EXISTS `meta_history` (
      `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',
      `gmt_create` datetime NOT NULL COMMENT '创建时间',
      `gmt_modified` datetime NOT NULL COMMENT '修改时间',
      `destination` varchar(128) DEFAULT NULL COMMENT '通道名称',
      `binlog_file` varchar(64) DEFAULT NULL COMMENT 'binlog文件名',
      `binlog_offest` bigint(20) DEFAULT NULL COMMENT 'binlog偏移量',
      `binlog_master_id` varchar(64) DEFAULT NULL COMMENT 'binlog节点id',
      `binlog_timestamp` bigint(20) DEFAULT NULL COMMENT 'binlog应用的时间戳',
      `use_schema` varchar(1024) DEFAULT NULL COMMENT '执行sql时对应的schema',
      `sql_schema` varchar(1024) DEFAULT NULL COMMENT '对应的schema',
      `sql_table` varchar(1024) DEFAULT NULL COMMENT '对应的table',
      `sql_text` longtext DEFAULT NULL COMMENT '执行的sql',
      `sql_type` varchar(256) DEFAULT NULL COMMENT 'sql类型',
      `extra` text DEFAULT NULL COMMENT '额外的扩展信息',
      PRIMARY KEY (`id`),
      UNIQUE KEY binlog_file_offest(`destination`,`binlog_master_id`,`binlog_file`,`binlog_offest`),
      KEY `destination` (`destination`),
      KEY `destination_timestamp` (`destination`,`binlog_timestamp`),
      KEY `gmt_modified` (`gmt_modified`)
    ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT='表结构变化明细表';


    GRANT ALL PRIVILEGES ON `canal\_tsdb`.* TO `canal`@`%`;
    FLUSH PRIVILEGES;
    SHOW GRANTS FOR 'canal'@'%';
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: canal-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: canal-mysql
  template:
    metadata:
      labels:
        app: canal-mysql
    spec:
      containers:
      - name: mysql
        image: bitnami/mysql:8.0.40-debian-12-r1
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "666666"
        - name: MYSQL_USER
          value: canal
        - name: MYSQL_PASSWORD
          value: canal
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /bitnami/mysql/data
        - name: custom-init-scripts
          mountPath: /docker-entrypoint-initdb.d
        - name: custom-conf
          mountPath: /opt/bitnami/mysql/conf/my_custom.cnf
          subPath: my_custom.cnf
      volumes:
      - name: mysql-storage
        emptyDir: {}
      - name: custom-init-scripts
        configMap:
          name: canal-mysql-initdb
      - name: custom-conf
        configMap:
          name: canal-mysql-conf
---
apiVersion: v1
kind: Service
metadata:
  name: canal-mysql
spec:
  selector:
    app: canal-mysql
  ports:
    - port: 3306
      targetPort: 3306
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: canal-mysql-conf
  labels:
    app: canal-demo
data:
  my_custom.cnf: |
    [mysqld]
    character_set_server = utf8mb4
    collation_server = utf8mb4_unicode_ci
    default_time_zone = '+08:00'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: canal-logback
  labels:
    app: canal-demo
data:
  logback.xml: |
    <configuration>
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
            </encoder>
        </appender>

        <root level="info">
            <appender-ref ref="STDOUT" />
        </root>
    </configuration>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: canal-config
  labels:
    app: canal-demo
data:
  canal.properties: |
    #################################################
    ######### 		common argument		#############
    #################################################
    # tcp bind ip
    canal.ip =
    # register ip to zookeeper
    canal.register.ip =
    canal.port = 11111
    canal.metrics.pull.port = 11112
    # canal instance user/passwd
    # canal.user = canal
    # canal.passwd =

    # canal admin config
    #canal.admin.manager = 127.0.0.1:8089
    canal.admin.port = 11110
    canal.admin.user = admin
    canal.admin.passwd =
    # admin auto register
    #canal.admin.register.auto = true
    #canal.admin.register.cluster =
    #canal.admin.register.name =

    canal.zkServers =
    # flush data to zk
    canal.zookeeper.flush.period = 1000
    canal.withoutNetty = false
    # tcp, kafka, rocketMQ, rabbitMQ, pulsarMQ
    canal.serverMode = tcp
    # flush meta cursor/parse position to file
    canal.file.data.dir = ${canal.conf.dir}
    canal.file.flush.period = 1000
    ## memory store RingBuffer size, should be Math.pow(2,n)
    canal.instance.memory.buffer.size = 16384
    ## memory store RingBuffer used memory unit size , default 1kb
    canal.instance.memory.buffer.memunit = 1024
    ## meory store gets mode used MEMSIZE or ITEMSIZE
    canal.instance.memory.batch.mode = MEMSIZE
    canal.instance.memory.rawEntry = true

    ## detecing config
    canal.instance.detecting.enable = false
    #canal.instance.detecting.sql = insert into retl.xdual values(1,now()) on duplicate key update x=now()
    canal.instance.detecting.sql = select 1
    canal.instance.detecting.interval.time = 3
    canal.instance.detecting.retry.threshold = 3
    canal.instance.detecting.heartbeatHaEnable = false

    # support maximum transaction size, more than the size of the transaction will be cut into multiple transactions delivery
    canal.instance.transaction.size =  1024
    # mysql fallback connected to new master should fallback times
    canal.instance.fallbackIntervalInSeconds = 60

    # network config
    canal.instance.network.receiveBufferSize = 16384
    canal.instance.network.sendBufferSize = 16384
    canal.instance.network.soTimeout = 30

    # binlog filter config
    canal.instance.filter.druid.ddl = true
    canal.instance.filter.query.dcl = false
    canal.instance.filter.query.dml = false
    canal.instance.filter.query.ddl = false
    canal.instance.filter.table.error = false
    canal.instance.filter.rows = false
    canal.instance.filter.transaction.entry = false
    canal.instance.filter.dml.insert = false
    canal.instance.filter.dml.update = false
    canal.instance.filter.dml.delete = false

    # binlog format/image check
    canal.instance.binlog.format = ROW,STATEMENT,MIXED
    canal.instance.binlog.image = FULL,MINIMAL,NOBLOB

    # binlog ddl isolation
    canal.instance.get.ddl.isolation = false

    # parallel parser config
    canal.instance.parser.parallel = true
    ## concurrent thread number, default 60% available processors, suggest not to exceed Runtime.getRuntime().availableProcessors()
    #canal.instance.parser.parallelThreadSize = 16
    ## disruptor ringbuffer size, must be power of 2
    canal.instance.parser.parallelBufferSize = 256

    # table meta tsdb info
    canal.instance.tsdb.enable = true
    canal.instance.tsdb.dir = ${canal.file.data.dir:../conf}/${canal.instance.destination:}
    canal.instance.tsdb.url = jdbc:h2:${canal.instance.tsdb.dir}/h2;CACHE_SIZE=1000;MODE=MYSQL;
    canal.instance.tsdb.dbUsername = canal
    canal.instance.tsdb.dbPassword = canal
    # dump snapshot interval, default 24 hour
    canal.instance.tsdb.snapshot.interval = 24
    # purge snapshot expire , default 360 hour(15 days)
    canal.instance.tsdb.snapshot.expire = 360

    #################################################
    ######### 		destinations		#############
    #################################################
    canal.destinations = example
    # conf root dir
    canal.conf.dir = ../conf
    # auto scan instance dir add/remove and start/stop instance
    canal.auto.scan = true
    canal.auto.scan.interval = 5
    # set this value to 'true' means that when binlog pos not found, skip to latest.
    # WARN: pls keep 'false' in production env, or if you know what you want.
    canal.auto.reset.latest.pos.mode = false

    canal.instance.tsdb.spring.xml = classpath:spring/tsdb/h2-tsdb.xml
    #canal.instance.tsdb.spring.xml = classpath:spring/tsdb/mysql-tsdb.xml

    canal.instance.global.mode = spring
    canal.instance.global.lazy = false
    canal.instance.global.manager.address = ${canal.admin.manager}
    #canal.instance.global.spring.xml = classpath:spring/memory-instance.xml
    canal.instance.global.spring.xml = classpath:spring/file-instance.xml
    #canal.instance.global.spring.xml = classpath:spring/default-instance.xml

    ##################################################
    ######### 	      MQ Properties      #############
    ##################################################
    # aliyun ak/sk , support rds/mq
    canal.aliyun.accessKey =
    canal.aliyun.secretKey =
    canal.aliyun.uid=

    canal.mq.flatMessage = true
    canal.mq.canalBatchSize = 50
    canal.mq.canalGetTimeout = 100
    # Set this value to "cloud", if you want open message trace feature in aliyun.
    canal.mq.accessChannel = local

    canal.mq.database.hash = true
    canal.mq.send.thread.size = 30
    canal.mq.build.thread.size = 8

    ##################################################
    ######### 		     Kafka 		     #############
    ##################################################
    kafka.bootstrap.servers = 127.0.0.1:9092
    kafka.acks = all
    kafka.compression.type = none
    kafka.batch.size = 16384
    kafka.linger.ms = 1
    kafka.max.request.size = 1048576
    kafka.buffer.memory = 33554432
    kafka.max.in.flight.requests.per.connection = 1
    kafka.retries = 0

    kafka.kerberos.enable = false
    kafka.kerberos.krb5.file = ../conf/kerberos/krb5.conf
    kafka.kerberos.jaas.file = ../conf/kerberos/jaas.conf

    # sasl demo
    # kafka.sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule required \\n username=\"alice\" \\npassword="alice-secret\";
    # kafka.sasl.mechanism = SCRAM-SHA-512
    # kafka.security.protocol = SASL_PLAINTEXT

    ##################################################
    ######### 		    RocketMQ	     #############
    ##################################################
    rocketmq.producer.group = test
    rocketmq.enable.message.trace = false
    rocketmq.customized.trace.topic =
    rocketmq.namespace =
    rocketmq.namesrv.addr = 127.0.0.1:9876
    rocketmq.retry.times.when.send.failed = 0
    rocketmq.vip.channel.enabled = false
    rocketmq.tag =

    ##################################################
    ######### 		    RabbitMQ	     #############
    ##################################################
    rabbitmq.host =
    rabbitmq.virtual.host =
    rabbitmq.exchange =
    rabbitmq.username =
    rabbitmq.password =
    rabbitmq.queue =
    rabbitmq.routingKey =
    rabbitmq.deliveryMode =


    ##################################################
    ######### 		      Pulsar         #############
    ##################################################
    pulsarmq.serverUrl =
    pulsarmq.roleToken =
    pulsarmq.topicTenantPrefix =

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: canal-instance-config
  labels:
    app: canal-demo
data:
  instance.properties: |
    #################################################
    ## mysql serverId , v1.0.26+ will autoGen
    canal.instance.mysql.slaveId=6666666

    # enable gtid use true/false
    canal.instance.gtidon=false

    # rds oss binlog
    canal.instance.rds.accesskey=
    canal.instance.rds.secretkey=
    canal.instance.rds.instanceId=

    # position info
    canal.instance.master.address=main-db8-mysql.default.svc.cluster.local:3306
    canal.instance.master.journal.name=
    canal.instance.master.position=
    canal.instance.master.timestamp=
    canal.instance.master.gtid=

    # multi stream for polardbx
    canal.instance.multi.stream.on=false

    # ssl
    #canal.instance.master.sslMode=DISABLED
    #canal.instance.master.tlsVersions=
    #canal.instance.master.trustCertificateKeyStoreType=
    #canal.instance.master.trustCertificateKeyStoreUrl=
    #canal.instance.master.trustCertificateKeyStorePassword=
    #canal.instance.master.clientCertificateKeyStoreType=
    #canal.instance.master.clientCertificateKeyStoreUrl=
    #canal.instance.master.clientCertificateKeyStorePassword=

    # table meta tsdb info
    canal.instance.tsdb.enable=true
    #canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb
    #canal.instance.tsdb.dbUsername=canal
    #canal.instance.tsdb.dbPassword=canal

    #canal.instance.standby.address =
    #canal.instance.standby.journal.name =
    #canal.instance.standby.position =
    #canal.instance.standby.timestamp =
    #canal.instance.standby.gtid=

    # username/password
    canal.instance.dbUsername=canal
    canal.instance.dbPassword=canal
    canal.instance.connectionCharset = UTF-8
    # enable druid Decrypt database password
    canal.instance.enableDruid=false
    #canal.instance.pwdPublicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALK4BUxdDltRRE5/zXpVEVPUgunvscYFtEip3pmLlhrWpacX7y7GCMo2/JM6LeHmiiNdH1FWgGCpUfircSwlWKUCAwEAAQ==

    # table regex
    canal.instance.filter.regex=.*\\..*
    # table black regex
    canal.instance.filter.black.regex=mysql\\.slave_.*
    # table field filter(format: schema1.tableName1:field1/field2,schema2.tableName2:field1/field2)
    #canal.instance.filter.field=test1.t_product:id/subject/keywords,test2.t_company:id/name/contact/ch
    # table field black filter(format: schema1.tableName1:field1/field2,schema2.tableName2:field1/field2)
    #canal.instance.filter.black.field=test1.t_product:subject/product_image,test2.t_company:id/name/contact/ch

    # mq config
    canal.mq.topic=k8sexample
    canal.mq.dynamicTopic=k8stest2
    # dynamic topic route by schema or table regex
    #canal.mq.dynamicTopic=mytest1.user,topic2:mytest2\\..*,.*\\..*
    canal.mq.partition=0
    # hash partition config
    #canal.mq.enableDynamicQueuePartition=false
    #canal.mq.partitionsNum=3
    #canal.mq.dynamicTopicPartitionNum=test.*:4,mycanal:6
    #canal.mq.partitionHash=test.table:id^name,.*\\..*
    #################################################
---
apiVersion: v1
kind: Service
metadata:
  name: canal-server-headless
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-11110
      port: 11110
      targetPort: tcp-11110
    - name: tcp-11111
      port: 11111
      targetPort: tcp-11111
  selector:
    app: canal-demo
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: canal-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: canal-demo
  serviceName: canal-server-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: canal-demo
    spec:
      enableServiceLinks: true
      containers:
        - image: dyrnq/canal-server:1.1.8-alpha-3-jdk21
          imagePullPolicy: IfNotPresent
          name: canal-server
          env:
            - name: TZ
              value: Asia/Shanghai
            - name: JAVA_OPTS
              value: -XX:+IgnoreUnrecognizedVMOptions
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: canal.register.ip
              value: $(POD_NAME).canal-server-headless.$(NAMESPACE).svc.cluster.local
            - name: canal.zkServers
              value: zookeeper-0.zookeeper-headless.default.svc.cluster.local:2181,zookeeper-1.zookeeper-headless.default.svc.cluster.local:2181,zookeeper-2.zookeeper-headless.default.svc.cluster.local:2181
            - name: canal.instance.global.spring.xml
              value: classpath:spring/default-instance.xml
            - name: canal.serverMode
              value: rocketMQ
            - name: rocketmq.namesrv.addr
              value: 192.168.88.123:9876
            - name: rocketmq.producer.group
              value: k8stest
            - name: canal.instance.tsdb.enable
              value: "true"
            - name: canal.instance.tsdb.url
              value: "jdbc:mysql://canal-mysql.default.svc.cluster.local:3306/canal_tsdb?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true"
            - name: canal.instance.tsdb.dbUsername
              value: canal
            - name: canal.instance.tsdb.dbPassword
              value: canal
            - name: canal.instance.tsdb.spring.xml
              value: classpath:spring/tsdb/mysql-tsdb.xml
          ports:
            - containerPort: 11110
              name: tcp-11110
            - containerPort: 11111
              name: tcp-11111
            - containerPort: 11112
              name: tcp-11112
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              path: /metrics
              port: 11112
            # tcpSocket:
            #   port: 11110
            timeoutSeconds: 5
          volumeMounts:
            - name: canal-config
              mountPath: /home/admin/canal-server/conf/canal.properties
              subPath: canal.properties
              readOnly: true
            - name: canal-instance-config
              mountPath: /home/admin/canal-server/conf/example/instance.properties
              subPath: instance.properties
              readOnly: true
            - name: canal-logback
              mountPath: /home/admin/canal-server/conf/logback.xml
              subPath: logback.xml
              readOnly: true
      volumes:
        - name: canal-instance-config
          configMap:
            name: canal-instance-config
        - name: canal-config
          configMap:
            name: canal-config
        - name: canal-logback
          configMap:
            name: canal-logback
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zoonavigator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zoonavigator
  template:
    metadata:
      labels:
        app: zoonavigator
    spec:
      containers:
        - name: zoonavigator
          image: elkozmon/zoonavigator:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: HTTP_PORT
              value: "9090"
          ports:
            - containerPort: 9090
              name: http
---
apiVersion: v1
kind: Service
metadata:
  name: zoonavigator
spec:
  type: NodePort
  selector:
    app: zoonavigator
  ports:
    - port: 9090
      targetPort: http
      nodePort: 32090
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: main-db8-mysql-initdb
data:
  initdb.sql: |

    CREATE USER canal IDENTIFIED WITH mysql_native_password BY 'canal';
    GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%';
    FLUSH PRIVILEGES;
    CREATE DATABASE /*!32312 IF NOT EXISTS*/ `k8stest2` /*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */;
    USE `k8stest2`;
    SET NAMES utf8;
    SET FOREIGN_KEY_CHECKS = 0;

    -- ----------------------------
    -- Table structure for stuff
    -- ----------------------------
    DROP TABLE IF EXISTS `stuff`;
    CREATE TABLE `stuff` (
        id INT PRIMARY KEY,
        name VARCHAR(50)
    );


    INSERT INTO stuff (id, name) VALUES (1, 'Alice');
    INSERT INTO stuff (id, name) VALUES (2, 'Bob');
    INSERT INTO stuff (id, name) VALUES (3, 'Charlie');
    INSERT INTO stuff (id, name) VALUES (4, 'David');
    INSERT INTO stuff (id, name) VALUES (5, 'Eva');
    INSERT INTO stuff (id, name) VALUES (6, 'Frank');
    INSERT INTO stuff (id, name) VALUES (7, 'Grace');
    INSERT INTO stuff (id, name) VALUES (8, 'Hannah');
    INSERT INTO stuff (id, name) VALUES (9, 'Ivy');
    INSERT INTO stuff (id, name) VALUES (10, 'Jack');
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: main-db8-mysql-conf
  labels:
    app: canal-demo
data:
  my_custom.cnf: |
    [mysqld]
    log-bin=mysql-bin
    binlog-format=ROW
    server_id=1
    character_set_server = utf8mb4
    collation_server = utf8mb4_unicode_ci
    default_time_zone = '+08:00'
    binlog_row_image = FULL
    binlog_row_metadata = FULL

---
apiVersion: v1
kind: Service
metadata:
  name: main-db8-mysql
spec:
  selector:
    app: main-db8-mysql
  ports:
    - port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: main-db8-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: main-db8-mysql
  template:
    metadata:
      labels:
        app: main-db8-mysql
    spec:
      containers:
      - name: mysql
        image: bitnami/mysql:8.0.40-debian-12-r1
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "666666"
        # - name: MYSQL_USER
        #   value: canal
        # - name: MYSQL_PASSWORD
        #   value: canal
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /bitnami/mysql/data
        - name: custom-init-scripts
          mountPath: /docker-entrypoint-initdb.d
        - name: custom-conf
          mountPath: /opt/bitnami/mysql/conf/my_custom.cnf
          subPath: my_custom.cnf
      volumes:
      - name: mysql-storage
        emptyDir: {}
      - name: custom-init-scripts
        configMap:
          name: main-db8-mysql-initdb
      - name: custom-conf
        configMap:
          name: main-db8-mysql-conf
