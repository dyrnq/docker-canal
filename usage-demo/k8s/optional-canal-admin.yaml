---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: canal-admin
  labels:
    app: canal-admin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: canal-admin
  template:
    metadata:
      labels:
        app: canal-admin
    spec:
      containers:
        - name: canal-admin
          image: dyrnq/canal-admin:1.1.8-alpha-3-jdk21
          env:
            - name: TZ
              value: "Asia/Shanghai"
            - name: JAVA_OPTS
              value: "-XX:+IgnoreUnrecognizedVMOptions"
            - name: spring.datasource.address
              value: "canal-mysql.default.svc.cluster.local:3306"
            - name: spring.datasource.database
              value: "canal_manager"
            - name: spring.datasource.username
              value: "canal"
            - name: spring.datasource.password
              value: "canal"
            - name: spring.datasource.driver-class-name
              value: "com.mysql.cj.jdbc.Driver"
            - name: spring.datasource.url
              value: "jdbc:mysql://canal-mysql.default.svc.cluster.local:3306/canal_manager?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true"
            - name: server.port
              value: "8090"
            - name: canal.adminUser
              value: "admin"
            - name: canal.adminPasswd
              value: "admin"
          volumeMounts:
            - name: canal-logback
              mountPath: /home/admin/canal-admin/conf/logback.xml
              subPath: logback.xml
              readOnly: true
      volumes:
        - name: canal-logback
          configMap:
            name: canal-logback
---
apiVersion: v1
kind: Service
metadata:
  name: canal-admin-service
spec:
  type: NodePort
  selector:
    app: canal-admin
  ports:
    - port: 8090
      targetPort: 8090
      nodePort: 30890

---
apiVersion: v1
kind: Service
metadata:
  name: canal-server-headless
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-11110
      port: 11110
      targetPort: tcp-11110
    - name: tcp-11111
      port: 11111
      targetPort: tcp-11111
  selector:
    app: canal-demo
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: canal-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: canal-demo
  serviceName: canal-server-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: canal-demo
    spec:
      enableServiceLinks: true
      containers:
        - image: dyrnq/canal-server:1.1.8-alpha-3-jdk21
          imagePullPolicy: IfNotPresent
          name: canal-server
          args: [ "local" ]
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: canal.register.ip
              value: $(POD_NAME).canal-server-headless.$(NAMESPACE).svc.cluster.local
            - name: TZ
              value: "Asia/Shanghai"
            - name: JAVA_OPTS
              value: "-XX:+IgnoreUnrecognizedVMOptions"
            - name: canal.admin.manager
              value: "canal-admin-service.default.svc.cluster.local:8090"
            - name: canal.admin.register.auto
              value: "true"
            - name: canal.admin.register.cluster
              value: "foo"
            - name: canal.admin.register.name
              value: "$(POD_NAME)"
            - name: canal.admin.user
              value: "admin"
            - name: canal.admin.passwd
              value: "4ACFE3202A5FF5CF467898FC58AAB1D615029441"
            - name: SERVER_SERVLET_SESSION_TIMEOUT
              value: 6d
          ports:
            - containerPort: 11110
              name: tcp-11110
            - containerPort: 11111
              name: tcp-11111
            - containerPort: 11112
              name: tcp-11112
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              path: /metrics
              port: 11112
            timeoutSeconds: 5
          volumeMounts:
            - name: canal-logback
              mountPath: /home/admin/canal-server/conf/logback.xml
              subPath: logback.xml
              readOnly: true
      volumes:
        - name: canal-logback
          configMap:
            name: canal-logback
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: canal-admin-foo-cm
data:
  foo.sh: |
    #!/bin/bash
    set -eo pipefail
    SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd -P)
    api_host="http://127.0.0.1:18090"

    if env |grep KUBERNETES_; then
        echo "Running in a container (PID 1)"


        if [ -e /etc/apt/sources.list ]; then
        sed -i \
        -e 's@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g' \
        -e 's@security.ubuntu.com@mirrors.ustc.edu.cn@g' /etc/apt/sources.list
        fi

        if [ -e /etc/apt/sources.list.d/ubuntu.sources ]; then
        sed -i \
        -e 's@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g' \
        -e 's@security.ubuntu.com@mirrors.ustc.edu.cn@g' /etc/apt/sources.list.d/ubuntu.sources
        fi

        apt update;apt install httpie jq curl -y
        api_host="http://canal-admin-service.default.svc.cluster.local:8090"
    else
        echo "Not running in a container"
    fi


    echo "api_host=${api_host}"




    login_api="${api_host}/api/v1/user/login"
    cluster_clusters_api="${api_host}/api/v1/canal/clusters"
    cluster_cluster_api="${api_host}/api/v1/canal/cluster"
    cluster_config_api="${api_host}/api/v1/canal/config"
    instance_api="${api_host}/api/v1/canal/instance"


    while true; do
      curl -S -o /dev/null ${api_host} && token=$(http -j --ignore-stdin --session /tmp/canal.admin.session POST $login_api username=admin password=123456 | jq -r '.data.token') && echo "token=${token}" && break
    done

    if http -j --ignore-stdin --session /tmp/canal.admin.session GET $cluster_clusters_api X-Token:"${token}" | grep foo; then
        echo "cluster foo already exists"
    else
        http -j --ignore-stdin --verbose --session /tmp/canal.admin.session POST $cluster_cluster_api name=foo zkHosts=zookeeper-0.zookeeper-headless.default.svc.cluster.local:2181,zookeeper-1.zookeeper-headless.default.svc.cluster.local:2181,zookeeper-2.zookeeper-headless.default.svc.cluster.local:2181 X-Token:"${token}"
    fi

    ## check main config exists

    if [ "null" = "$(http -j --ignore-stdin --session /tmp/canal.admin.session GET "${cluster_config_api}/1/0" | jq -r '.data.id')" ]; then
    http -j --ignore-stdin --verbose --session /tmp/canal.admin.session PUT $cluster_config_api clusterId=1 name=canal.properties content=@"${SCRIPT_DIR}"/canal.properties X-Token:"${token}"
    else
      echo "cluster foo main config already exists"
    fi

    sleep 5s;

    http -j --ignore-stdin --verbose --session /tmp/canal.admin.session POST $instance_api clusterServerId=cluster:1 name=example content=@"${SCRIPT_DIR}"/instance.properties X-Token:"${token}"

    #if [ -f /.dockerenv ]; then
    if env |grep KUBERNETES_; then
      tail -f /dev/null
    fi

  canal.properties: |
    #################################################
    ######### 		common argument		#############
    #################################################
    # tcp bind ip
    canal.ip =
    # register ip to zookeeper
    canal.register.ip =
    canal.port = 11111
    canal.metrics.pull.port = 11112
    # canal instance user/passwd
    # canal.user = canal
    # canal.passwd = E3619321C1A937C46A0D8BD1DAC39F93B27D4458

    # canal admin config
    #canal.admin.manager = 127.0.0.1:8089
    canal.admin.port = 11110
    canal.admin.user = admin
    canal.admin.passwd = 4ACFE3202A5FF5CF467898FC58AAB1D615029441
    # admin auto register
    #canal.admin.register.auto = true
    #canal.admin.register.cluster =
    #canal.admin.register.name =

    canal.zkServers =zookeeper-0.zookeeper-headless.default.svc.cluster.local:2181,zookeeper-1.zookeeper-headless.default.svc.cluster.local:2181,zookeeper-2.zookeeper-headless.default.svc.cluster.local:2181
    # flush data to zk
    canal.zookeeper.flush.period = 1000
    canal.withoutNetty = false
    # tcp, kafka, rocketMQ, rabbitMQ, pulsarMQ
    canal.serverMode = rocketMQ
    # flush meta cursor/parse position to file
    canal.file.data.dir = ${canal.conf.dir}
    canal.file.flush.period = 1000
    ## memory store RingBuffer size, should be Math.pow(2,n)
    canal.instance.memory.buffer.size = 16384
    ## memory store RingBuffer used memory unit size , default 1kb
    canal.instance.memory.buffer.memunit = 1024
    ## meory store gets mode used MEMSIZE or ITEMSIZE
    canal.instance.memory.batch.mode = MEMSIZE
    canal.instance.memory.rawEntry = true

    ## detecing config
    canal.instance.detecting.enable = false
    #canal.instance.detecting.sql = insert into retl.xdual values(1,now()) on duplicate key update x=now()
    canal.instance.detecting.sql = select 1
    canal.instance.detecting.interval.time = 3
    canal.instance.detecting.retry.threshold = 3
    canal.instance.detecting.heartbeatHaEnable = false

    # support maximum transaction size, more than the size of the transaction will be cut into multiple transactions delivery
    canal.instance.transaction.size =  1024
    # mysql fallback connected to new master should fallback times
    canal.instance.fallbackIntervalInSeconds = 60

    # network config
    canal.instance.network.receiveBufferSize = 16384
    canal.instance.network.sendBufferSize = 16384
    canal.instance.network.soTimeout = 30

    # binlog filter config
    canal.instance.filter.druid.ddl = true
    canal.instance.filter.query.dcl = false
    canal.instance.filter.query.dml = false
    canal.instance.filter.query.ddl = false
    canal.instance.filter.table.error = false
    canal.instance.filter.rows = false
    canal.instance.filter.transaction.entry = false
    canal.instance.filter.dml.insert = false
    canal.instance.filter.dml.update = false
    canal.instance.filter.dml.delete = false

    # binlog format/image check
    canal.instance.binlog.format = ROW,STATEMENT,MIXED
    canal.instance.binlog.image = FULL,MINIMAL,NOBLOB

    # binlog ddl isolation
    canal.instance.get.ddl.isolation = false

    # parallel parser config
    canal.instance.parser.parallel = true
    ## concurrent thread number, default 60% available processors, suggest not to exceed Runtime.getRuntime().availableProcessors()
    #canal.instance.parser.parallelThreadSize = 16
    ## disruptor ringbuffer size, must be power of 2
    canal.instance.parser.parallelBufferSize = 256

    # table meta tsdb info
    #canal.instance.tsdb.enable = true
    #canal.instance.tsdb.dir = ${canal.file.data.dir:../conf}/${canal.instance.destination:}
    #canal.instance.tsdb.url = jdbc:h2:${canal.instance.tsdb.dir}/h2;CACHE_SIZE=1000;MODE=MYSQL;
    #canal.instance.tsdb.dbUsername = canal
    #canal.instance.tsdb.dbPassword = canal
    # dump snapshot interval, default 24 hour
    canal.instance.tsdb.snapshot.interval = 24
    # purge snapshot expire , default 360 hour(15 days)
    canal.instance.tsdb.snapshot.expire = 360

    #################################################
    ######### 		destinations		#############
    #################################################
    canal.destinations =
    # conf root dir
    canal.conf.dir = ../conf
    # auto scan instance dir add/remove and start/stop instance
    canal.auto.scan = true
    canal.auto.scan.interval = 5
    # set this value to 'true' means that when binlog pos not found, skip to latest.
    # WARN: pls keep 'false' in production env, or if you know what you want.
    canal.auto.reset.latest.pos.mode = false

    #canal.instance.tsdb.spring.xml = classpath:spring/tsdb/h2-tsdb.xml
    #canal.instance.tsdb.spring.xml = classpath:spring/tsdb/mysql-tsdb.xml

    canal.instance.global.mode = manager
    canal.instance.global.lazy = false
    canal.instance.global.manager.address = ${canal.admin.manager}
    #canal.instance.global.spring.xml = classpath:spring/memory-instance.xml
    #canal.instance.global.spring.xml = classpath:spring/file-instance.xml
    canal.instance.global.spring.xml = classpath:spring/default-instance.xml

    ##################################################
    ######### 	      MQ Properties      #############
    ##################################################
    # aliyun ak/sk , support rds/mq
    canal.aliyun.accessKey =
    canal.aliyun.secretKey =
    canal.aliyun.uid=

    canal.mq.flatMessage = true
    canal.mq.canalBatchSize = 50
    canal.mq.canalGetTimeout = 100
    # Set this value to "cloud", if you want open message trace feature in aliyun.
    canal.mq.accessChannel = local

    canal.mq.database.hash = true
    canal.mq.send.thread.size = 30
    canal.mq.build.thread.size = 8

    ##################################################
    ######### 		     Kafka 		     #############
    ##################################################
    kafka.bootstrap.servers = 127.0.0.1:6667
    kafka.acks = all
    kafka.compression.type = none
    kafka.batch.size = 16384
    kafka.linger.ms = 1
    kafka.max.request.size = 1048576
    kafka.buffer.memory = 33554432
    kafka.max.in.flight.requests.per.connection = 1
    kafka.retries = 0

    kafka.kerberos.enable = false
    kafka.kerberos.krb5.file = ../conf/kerberos/krb5.conf
    kafka.kerberos.jaas.file = ../conf/kerberos/jaas.conf

    # sasl demo
    # kafka.sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule required \\n username=\"alice\" \\npassword="alice-secret\";
    # kafka.sasl.mechanism = SCRAM-SHA-512
    # kafka.security.protocol = SASL_PLAINTEXT

    ##################################################
    ######### 		    RocketMQ	     #############
    ##################################################
    rocketmq.producer.group = test
    rocketmq.enable.message.trace = false
    rocketmq.customized.trace.topic =
    rocketmq.namespace =
    rocketmq.namesrv.addr = 192.168.88.123:9876
    rocketmq.retry.times.when.send.failed = 0
    rocketmq.vip.channel.enabled = false
    rocketmq.tag =

    ##################################################
    ######### 		    RabbitMQ	     #############
    ##################################################
    rabbitmq.host =
    rabbitmq.virtual.host =
    rabbitmq.exchange =
    rabbitmq.username =
    rabbitmq.password =
    rabbitmq.deliveryMode =


    ##################################################
    ######### 		      Pulsar         #############
    ##################################################
    pulsarmq.serverUrl =
    pulsarmq.roleToken =
    pulsarmq.topicTenantPrefix =




    canal.instance.tsdb.enable=true
    canal.instance.tsdb.url=jdbc:mysql://canal-mysql.default.svc.cluster.local:3306/canal_tsdb?useUnicode=true&characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    canal.instance.tsdb.dbUsername=canal
    canal.instance.tsdb.dbPassword=canal
    canal.instance.tsdb.spring.xml=classpath:spring/tsdb/mysql-tsdb.xml





  instance.properties: |
    #################################################
    ## mysql serverId , v1.0.26+ will autoGen
    canal.instance.mysql.slaveId=6666666

    # enable gtid use true/false
    canal.instance.gtidon=false

    # rds oss binlog
    canal.instance.rds.accesskey=
    canal.instance.rds.secretkey=
    canal.instance.rds.instanceId=

    # position info
    canal.instance.master.address=main-db8-mysql.default.svc.cluster.local:3306
    canal.instance.master.journal.name=
    canal.instance.master.position=
    canal.instance.master.timestamp=
    canal.instance.master.gtid=

    # multi stream for polardbx
    canal.instance.multi.stream.on=false

    # ssl
    #canal.instance.master.sslMode=DISABLED
    #canal.instance.master.tlsVersions=
    #canal.instance.master.trustCertificateKeyStoreType=
    #canal.instance.master.trustCertificateKeyStoreUrl=
    #canal.instance.master.trustCertificateKeyStorePassword=
    #canal.instance.master.clientCertificateKeyStoreType=
    #canal.instance.master.clientCertificateKeyStoreUrl=
    #canal.instance.master.clientCertificateKeyStorePassword=

    # table meta tsdb info
    canal.instance.tsdb.enable=true
    #canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb
    #canal.instance.tsdb.dbUsername=canal
    #canal.instance.tsdb.dbPassword=canal

    #canal.instance.standby.address =
    #canal.instance.standby.journal.name =
    #canal.instance.standby.position =
    #canal.instance.standby.timestamp =
    #canal.instance.standby.gtid=

    # username/password
    canal.instance.dbUsername=canal
    canal.instance.dbPassword=canal
    canal.instance.connectionCharset = UTF-8
    # enable druid Decrypt database password
    canal.instance.enableDruid=false
    #canal.instance.pwdPublicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALK4BUxdDltRRE5/zXpVEVPUgunvscYFtEip3pmLlhrWpacX7y7GCMo2/JM6LeHmiiNdH1FWgGCpUfircSwlWKUCAwEAAQ==

    # table regex
    canal.instance.filter.regex=.*\\..*
    # table black regex
    canal.instance.filter.black.regex=mysql\\.slave_.*
    # table field filter(format: schema1.tableName1:field1/field2,schema2.tableName2:field1/field2)
    #canal.instance.filter.field=test1.t_product:id/subject/keywords,test2.t_company:id/name/contact/ch
    # table field black filter(format: schema1.tableName1:field1/field2,schema2.tableName2:field1/field2)
    #canal.instance.filter.black.field=test1.t_product:subject/product_image,test2.t_company:id/name/contact/ch

    # mq config
    canal.mq.topic=k8sexample
    canal.mq.dynamicTopic=k8stest2
    # dynamic topic route by schema or table regex
    #canal.mq.dynamicTopic=mytest1.user,topic2:mytest2\\..*,.*\\..*
    canal.mq.partition=0
    # hash partition config
    #canal.mq.enableDynamicQueuePartition=false
    #canal.mq.partitionsNum=3
    #canal.mq.dynamicTopicPartitionNum=test.*:4,mycanal:6
    #canal.mq.partitionHash=test.table:id^name,.*\\..*
    #################################################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: canal-admin-foo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: canal-admin-foo
  template:
    metadata:
      labels:
        app: canal-admin-foo
    spec:
      containers:
        - name: canal-admin-foo
          image: ubuntu:jammy
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: canal-admin-foo-cm
              mountPath: /data
          securityContext:
            privileged: true
          command: [ "/bin/bash", "/data/foo.sh" ]
      volumes:
        - name: canal-admin-foo-cm
          configMap:
            name: canal-admin-foo-cm
            defaultMode: 0755
